<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Juego de Lanzamiento de Proyectiles</title>
    <style>
        body { margin: 0; }
        canvas { display: block; }
    </style>
</head>
<body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script>
    let scene, camera, renderer, projectile, clock;
    let velocity, angle;
    let gravity = new THREE.Vector3(0, -9.8, 0);
    let isLaunched = false;

    function init() {
        // Crear la escena
        scene = new THREE.Scene();

        // Configurar la cámara
        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.set(0, 100, 300);

        // Crear el renderizador
        renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // Crear el proyectil
        const geometry = new THREE.SphereGeometry(5, 32, 32);
        const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });
        projectile = new THREE.Mesh(geometry, material);
        projectile.position.set(0, 5, 0);
        scene.add(projectile);

        // Crear el suelo
        const planeGeometry = new THREE.PlaneGeometry(1000, 1000);
        const planeMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00, side: THREE.DoubleSide });
        const plane = new THREE.Mesh(planeGeometry, planeMaterial);
        plane.rotation.x = Math.PI / 2;
        plane.position.y = -50;
        scene.add(plane);

        // Reloj para medir el tiempo
        clock = new THREE.Clock();

        // Evento de teclado para lanzar el proyectil
        document.addEventListener('keydown', onKeyPress);

        animate();
    }

    function onKeyPress(event) {
        if (event.key === ' ') { // Espacio para lanzar el proyectil
            if (!isLaunched) {
                isLaunched = true;
                angle = Math.PI / 6; // 30 grados
                velocity = new THREE.Vector3(50 * Math.cos(angle), 50 * Math.sin(angle), 0); // Velocidad inicial
                clock.start();
            }
        }
    }

    function animate() {
        requestAnimationFrame(animate);

        // Obtener el tiempo transcurrido
        let deltaTime = clock.getDelta();

        // Aplicar movimiento parabólico
        if (isLaunched) {
            velocity.add(gravity.clone().multiplyScalar(deltaTime)); // Aplicar gravedad
            projectile.position.add(velocity.clone().multiplyScalar(deltaTime)); // Actualizar la posición

            // Verificar si el proyectil toca el suelo
            if (projectile.position.y < 5) {
                isLaunched = false; // Detener el proyectil
                clock.stop();
            }
        }

        renderer.render(scene, camera);
    }

    init();
</script>
</body>
</html>
